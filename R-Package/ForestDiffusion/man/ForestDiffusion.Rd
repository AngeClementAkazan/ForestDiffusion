% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ForestDiffusion.R
\name{ForestDiffusion}
\alias{ForestDiffusion}
\title{Diffusion and Flow-based XGBoost Model for generating or imputing data}
\usage{
ForestDiffusion(
  X,
  label_y = NULL,
  name_y = "y",
  n_t = 50,
  flow = TRUE,
  max_depth = 7,
  n_estimators = 100,
  eta = 0.3,
  duplicate_K = 50,
  true_min_max_values = NULL,
  eps = 0.001,
  beta_min = 0.1,
  beta_max = 8,
  max_n_cpus = NULL,
  seed = NULL
)
}
\arguments{
\item{X}{data.frame of the dataset to be used.}

\item{label_y}{optional vector containing the outcome variable if it is categorical for improved performance by training separate models per class; cannot contain missing values}

\item{name_y}{name of label_y}

\item{n_t}{number of noise levels (and sampling steps); increase for higher performance, but slows down training and sampling}

\item{flow}{If True, uses flow (an ODE deterministic method); otherwise uses vp (a SDE stochastic method); 'vp' generally has slightly worse performance, but it is the only method that can be used for imputation}

\item{max_depth}{max depth of the trees per XGBoost model}

\item{n_estimators}{number of trees per XGBoost model}

\item{eta}{learning rate per XGBoost model}

\item{duplicate_K}{number of noise per sample (or equivalently the number of times the rows of the dataset are duplicated); should be high, but performance caps at some point; higher values increase the memory demand}

\item{true_min_max_values}{(optional) list of form [[min_x, min_y], [max_x, max_y]]; If  provided, we use these values as the min/max for each variables when using clipping}

\item{eps}{minimum noise level}

\item{beta_min}{value of the beta_min in the vp process}

\item{beta_max}{value of the beta_max in the vp process}

\item{max_n_cpus}{(optional) limit the number of cpus used}

\item{seed}{(optional) random seed used}
}
\value{
Returns an object of the class "ForestDiffusion" which is list containing the XGBoost model fits
}
\description{
Train XGBoost regression models to estimate the score-function (for diffusion models) or the flow (flow-based models). These models can then be used to generate new fake samples or impute missing values.
}
\examples{
 \dontrun{
 data(iris)
 iris[,1:4] = missForest::prodNA(iris[,1:4], noNA = 0.2) # adding missing data
 X = data.frame(iris[,1:4])
 y = iris[,5]
 
 ## Generation
 
 # Classification problem (outcome is categorical)
 forest_model = ForestDiffusion(X, label_y=y, n_t=50, duplicate_K=50, flow=TRUE)
 # last variable will be the label_y
 Xy_fake = ForestDiffusion.generate(forest_model, batch_size=NROW(iris))
 
 # When you do not want to train a seperate model per model (or you have a regression problem)
 Xy = X
 Xy$y = y
 forest_model = ForestDiffusion(Xy, n_t=50, duplicate_K=50, flow=TRUE)
 Xy_fake = ForestDiffusion.generate(forest_model, batch_size=NROW(iris))
 
 ## Imputation
 
 # flow=True generate better data but it cannot impute data
 forest_model = ForestDiffusion(Xy, n_t=50, duplicate_K=50, flow=FALSE)
 nimp = 5 # number of imputations needed
 # regular (fast)
 Xy_fake = ForestDiffusion.impute(forest_model, k=nimp)
 # REPAINT (slow, but better)
 Xy_fake = ForestDiffusion.impute(forest_model, repaint=True, r=10, j=5, k=nimp)
}
 
}
\references{
TO ADD
}
